/*-------------------------------------------------------------------------
CMM Compiler description for C--
=== ============================
-------------------------------------------------------------------------*/

COMPILER CMM

    public  Tab     symbolTable;                     // symbol table


//--- LL(1) conflict resolvers

	// Returns true if a VarDecl comes next in the input
	boolean isVarDecl() {
		if (la.kind == _ident) {
			Token x = scanner.Peek();
			while (x.kind != _semicolon) {
				if (x.kind == _EOF || x.kind == _lpar || x.kind == _assign) return false;
				x = scanner.Peek();
			}
			return true;
		}
		return false;
	}

	// Returns true if the next input is an Expr and not a '(' Condition ')'
	boolean isExpr() {
		if (la.kind == _bang) return false;
		else if (la.kind == _lpar) {
			Token x = scanner.Peek();
			while (x.kind != _rpar && x.kind != _EOF) {
				if (x.kind == _eql || x.kind == _neq || x.kind == _lss || x.kind == _leq || x.kind == _gtr || x.kind == _geq) return false;
				x = scanner.Peek();
			}
			return x.kind == _rpar;
		} else return true;
	}

	// Returns true if the next input is a type cast (requires symbol table)
	boolean isCast() {
		Token x = scanner.Peek();
		if (x.kind != _ident)
		    return false;

        try{
            Type.valueOf(x.val.toUpperCase());
            return true;
        }catch (IllegalArgumentException e){
            return false;
        }
	}
/*-------------------------------------------------------------------------*/

CHARACTERS
  letter    = 'A'..'Z' + 'a'..'z'.
  digit     = '0'..'9'.
  charCh    = ANY - '\r' - '\n' - '\t' - '\'' - '\\'.

TOKENS
  ident     = letter { letter | digit }.
  intCon    = digit { digit }.
  floatCon  = digit {digit} '.' {digit} ['E' ['+'|'-'] digit {digit}].
  charCon   = '\'' ( charCh | '\\' ('r' | 'n' | 't' | '\'' | '\\' )) '\''.
  whitespace = '\t' | '\r' | '\n'.



  //--- token definitions for lookahead peeking
  lpar      = "(".
  rpar      = ")".
  semicolon = ";".
  assign    = '='.
  eql       = "==".
  neq       = "!=".
  lss       = "<".
  leq       = "<=".
  gtr       = ">".
  geq       = ">=".
  bang      = "!".
  mul       = "*".
  div       = "/".
  add       = "+".
  substr    = "-".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n'

IGNORE "\t\r\n"

//-------------------------------------------------------------------------

PRODUCTIONS

CMM
=	                                            (. symbolTable = new Tab();.)
{ ConstDecl
//| IF(isVarDecl()) VarDecl
| Statement<out Node statement>                 (. Node.dump(statement,0);.)
}                                               (. symbolTable.dumpTable();.)
.



Ident<out String name>
=
ident (.name=this.t.val;.).
//-------------------------------------------------------------------------
ConstDecl
=
"const" Type<out Type type> Ident<out String name> "=" (intCon | floatCon | charCon)(.symbolTable.insert(ObjKind.CON,name,type);.) ";".
//-------------------------------------------------------------------------
VarDecl
=
Type<out Type type> Ident<out String name> (.symbolTable.insert(ObjKind.VAR,name,type);.) {"," Ident<out String name1> (.symbolTable.insert(ObjKind.VAR,name1,type);.)} ";".
//-------------------------------------------------------------------------
Type<out Type typ>
=
Ident<out String name>
(.
try {
    typ = Type.valueOf(name.toUpperCase());
} catch (IllegalArgumentException e) {
    throw new RuntimeException(e);
}
.)
.

//-------------------------------------------------------------------------
Statement<out Node statement>                   (. statement=null; .)
=
(
Ident<out String name>
"=" Expr<out Node expression>                   (. statement=new Node(NodeKind.ASSIGN,new Node(symbolTable.find(name)),expression,0);.)";"
| "return" Expr<out Node expression>            (. statement=new Node(NodeKind.RETURN,expression,null,0);.)";"
| ";"
).

//-------------------------------------------------------------------------
Expr<out Node expr>
=
Term<out Node term>                           (.expr=term;.)
{
Addop<out NodeKind kind>
Term<out Node term1>                          (. expr=new Node(kind,term,term1,term1.type==term.type?term1.type:null); .)
}
.
//-------------------------------------------------------------------------
Term<out Node term>                           (.term=null;.)
=
Factor<out Node faktor>                       (.term=faktor;.)
{
Mulop<out NodeKind kind>
Factor<out Node faktor1>                      (. term=new Node(kind,faktor,faktor1,faktor1.type==faktor.type?faktor1.type:null); .)
}
.
//-------------------------------------------------------------------------
Factor <out Node faktor>        (.faktor=null;.)
=
(
intCon                          (. faktor=new Node(symbolTable.intVal(this.t.val)); .)
| floatCon                      (. faktor=new Node(symbolTable.floatVal(this.t.val)); .)
| charCon                       (. faktor=new Node(symbolTable.charVal(this.t.val)); .)
).
//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
Addop<out NodeKind kind>        (.kind=null;.)
=
"+"                             (. kind=NodeKind.PLUS;.)
| "-"                           (.kind=NodeKind.MINUS; .).
//-------------------------------------------------------------------------
Mulop<out NodeKind kind>        (.kind=null;.)
=
"*"                             (.kind=NodeKind.TIMES;.)
| "/"                           (.kind=NodeKind.DIV;.)
| "%"                           (.kind=NodeKind.REM;.).

END CMM.




//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
//Condition<out boolean truefalse>
//=
//CondTerm<out boolean truefalse1> (.truefalse=truefalse1;.)
//{"||" CondTerm<out boolean truefalse2> (.truefalse=truefalse&&truefalse2;.)}.
////-------------------------------------------------------------------------
//CondTerm<out boolean truefalse>
//=
//CondFact<out boolean truefalse1>(.truefalse=truefalse1;.)
//{"&&" CondFact<out boolean truefalse2>(.truefalse=truefalse&&truefalse2;.) }.
////-------------------------------------------------------------------------
//CondFact<out boolean truefalse>
//=
//( IF (isExpr()) Expr<out SyntaxNode expr1>
//  Relop<out int which>
//  Expr<out SyntaxNode expr2>
//| "!" "(" Condition<out boolean cond> ")"   (.truefalse=!cond;.)
//| "(" Condition<out boolean cond> ")"       (.truefalse=cond;.)
//).
////-------------------------------------------------------------------------
//Relop<out int which> = "==" | "!=" | ">" | ">=" | "<" | "<=" (.which=t.kind;.).
//-------------------------------------------------------------------------