/*##################################################################################
CMM Compiler description for C--
=== ============================
##################################################################################*/

COMPILER CMM

    public  SymbolTable     symbolTable;                     // symbol table


//--- LL(1) conflict resolvers

	// Returns true if a VarDecl comes next in the input
	boolean isVarDecl() {
		if (la.kind == _ident) {
			Token x = scanner.Peek();
			while (x.kind != _semicolon) {
				if (x.kind == _EOF || x.kind == _lpar || x.kind == _assign) return false;
				x = scanner.Peek();
			}
			return true;
		}
		return false;
	}

	// Returns true if the next input is an Expr and not a '(' Condition ')'
	boolean isExpr() {
		if (la.kind == _bang) return false;
		else if (la.kind == _lpar) {
			Token x = scanner.Peek();
			while (x.kind != _rpar && x.kind != _EOF) {
				if (x.kind == _eql || x.kind == _neq || x.kind == _lss || x.kind == _leq || x.kind == _gtr || x.kind == _geq) return false;
				x = scanner.Peek();
			}
			return x.kind == _rpar;
		} else return true;
	}

	// Returns true if the next input is a type cast
	boolean isCast() {
    		Token x = scanner.Peek();
    		if (x.kind != _ident) return false;
    		Obj obj = symbolTable.lookup(x.val);
    		return obj.kind == ObjKind.TYPE;
    	}


    boolean isCall(){
        scanner.ResetPeek();
        Token x = la;
        if(x.kind != _ident)
            return false;
        x=scanner.Peek();
        if(x.kind != _lpar)
            return false;

        return true;
    }

    //just a helperfunction
    void printNext5Values(){
        scanner.ResetPeek();
        System.out.println("-------");
        System.out.println("Value: "+this.la.val);
        for(int i = 0; i < 4; i++) {
            System.out.println("Value: "+scanner.Peek().val);
        }
    }

//##################################################################################

CHARACTERS
  letter    = 'A'..'Z' + 'a'..'z'.
  digit     = '0'..'9'.
  charCh    = ANY - '\r' - '\n' - '\t' - '\'' - '\\'.

TOKENS
  ident     = letter { letter | digit }.
  intCon    = digit { digit }.
  floatCon  = digit {digit} '.' {digit} ['E' ['+'|'-'] digit {digit}].
  charCon   = '\'' ( charCh | '\\' ('r' | 'n' | 't' | '\'' | '\\' )) '\''.
  stringCon   = '\"' { charCh | '\\' ('r' | 'n' | 't' | '\'' | '\\' )} '\"'.



  //--- token definitions for lookahead peeking
  lpar      = "(".
  rpar      = ")".
  semicolon = ";".
  assign    = '='.
  eql       = "==".
  neq       = "!=".
  lss       = "<".
  leq       = "<=".
  gtr       = ">".
  geq       = ">=".
  bang      = "!".
  mul       = "*".
  div       = "/".
  add       = "+".
  substr    = "-".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n'

IGNORE "\t\r\n"

//##################################################################################

PRODUCTIONS



//##################################################################################
CMM
=	                                            (. symbolTable = new SymbolTable(this);.)
{
IF(isVarDecl()) VarDecl
| ConstDecl
| StructDecl
| ProcDecl<out Obj procedure>
}
.
//##################################################################################




//##################################################################################
Ident<out String name>
=
ident                                          (.name=this.t.val;.)
.
//##################################################################################




//##################################################################################
StructDecl
=
"struct" Ident<out String name> "{"             (.Type type=new Type(Type.STRUCT);Obj obj=new Obj(ObjKind.TYPE,name,type);symbolTable.insert(obj);symbolTable.openScope(type.fields);.)
{ VarDecl}
                                                (.symbolTable.closeScope();type.size=type.fields.size;.)
 "}".
//##################################################################################




//##################################################################################
ConstDecl
=
"const"
Type<out Type type> Ident<out String name>      (.Obj o=new Obj(ObjKind.CON,name,type);.)
 "="
 (intCon                                        (.o.val=symbolTable.intVal(this.t.val);.)
 | floatCon                                     (.o.fVal=symbolTable.floatVal(this.t.val);.)
 | charCon                                      (.o.val=symbolTable.charVal(this.t.val);.)
 | stringCon                                    (.o.strVal=this.t.val;.)
 )                                              (.symbolTable.insert(o);.)
 ";".
//##################################################################################




//##################################################################################
VarDecl
=
Type<out Type type>
Ident<out String name>                          (.symbolTable.insert(ObjKind.VAR,name,type);.)
{"," Ident<out String name1>                    (.symbolTable.insert(ObjKind.VAR,name1,type);.)
}
";".
//##################################################################################




//##################################################################################
Type<out Type type>
=
Ident<out String name>                          (.type=symbolTable.find(name).type; .)
{"[" intCon                                     (.type=new Type(Type.ARR,symbolTable.intVal(this.t.val),type);.)
"]" }
.
//##################################################################################




//##################################################################################
ProcDecl<out Obj procedure>                     (.NodeList nodeList=new NodeList();.)
=
Type<out Type type>
Ident<out String name>                          (.procedure=new Obj(ObjKind.PROC,name,type);symbolTable.openScope(procedure.localScope); int startLine=scanner.line;.)
"("
[
    Parameter<out Obj param1>                   (. symbolTable.insert(param1);procedure.nPars++; .)
    {
        ',' Parameter<out Obj paramN>           (. symbolTable.insert(paramN);procedure.nPars++; .)
    }
]
")"
(
(./*Either new or forward declerated*/
Obj forwardProc=symbolTable.lookup(name);
if(forwardProc!=symbolTable.noObj){
    /*forward declerated or error*/
    if(!symbolTable.checkForwardParams(forwardProc,procedure)){
        System.err.println("Wrong Parameters");
        this.errors.count++;
    }
    procedure.isForward=true;
}
.)
"{"
{
IF(isVarDecl())VarDecl
|Statement<out Node statement>                  (.nodeList.add(statement);.)
}
                                                (.procedure.ast=new Node(NodeKind.STATSEQ,nodeList.get(),new Node(NodeKind.TRAP,null,null,scanner.line),procedure.type);.)
"}"
|";" "forward" ";"
)                                               (.symbolTable.closeScope();symbolTable.insert(procedure);.)
.
//##################################################################################




//##################################################################################
Parameter<out Obj obj>                          (. boolean isRef=false;.)
=
["ref" (. isRef=true;.)]
Type<out Type type> Ident<out String name>      (.obj=new Obj(ObjKind.VAR,name,type);obj.isRef=isRef;.).
//##################################################################################




//##################################################################################
Statement<out Node statement>                   (. statement=null;Node expression=null; NodeList innerStatements=new NodeList();.)
=
(
IF(isCall())ProcCall<out statement>
|Designator<out Node designator>
"=" Expr<out expression>                        (. statement=new Node(NodeKind.ASSIGN,designator,expression,scanner.line);/*Node.dump(expression,0);*/.)";"
| ReturnStatement<out statement>
| ";"
| "print" "(" Expr<out expression> ")" ";"      (. statement=new Node(NodeKind.PRINT,expression,null,scanner.line);.)
| "while""("Condition<out Node condition>")"
    Statement<out Node innerStatement>          (.statement=new Node(NodeKind.WHILE,condition,innerStatement,scanner.line);.)
| "if""("Condition<out Node condition>")"
  Statement<out Node ifStatements>              (. Node ifElse=ifStatements;.)
  ["else" Statement<out Node elseStatements>    (. ifElse=new Node(NodeKind.IFELSE,ifElse,elseStatements,scanner.line);.)]
                                                (. statement=new Node(NodeKind.IF,condition,ifElse,scanner.line);.)
| "{"
{Statement<out Node innerStatement>             (. innerStatements.add(innerStatement); .)
}                                               (. statement=innerStatements.get(); .)
"}"

).
//##################################################################################




//##################################################################################
ProcCall<out Node statement>                    (.NodeList nodeList=new NodeList();boolean isRef=false; int parCount=0;.)
=
Ident<out String name> "("
{
["ref"(.isRef=true;.)]
Designator<out Node designator>                 (. nodeList.add(isRef?new Node(NodeKind.REF,designator,null,designator.type):designator);parCount++; .)
}
")"                                             (. Obj proc=symbolTable.find(name);statement=new Node(NodeKind.CALL,new Node(proc),nodeList.get(),scanner.line);statement.type=proc.type;if(parCount!=proc.nPars)this.errors.count++;.)
.
//##################################################################################




//##################################################################################
ReturnStatement<out Node statement>             (.statement=null; Node expression=null;.)
=
"return" [Expr<out expression>]                 (. statement=new Node(NodeKind.RETURN,expression,null,scanner.line);.)";".
//##################################################################################




//##################################################################################
Expr<out Node expr>                             (.Node term;NodeKind kind;.)
=
Term<out expr>
{
Addop<out kind>
Term<out term>                                  (. expr=new Node(kind,expr,term,term.type==expr.type?term.type:SymbolTable.noType);.)
}
.
//##################################################################################




//##################################################################################
Term<out Node term>                             (.Node faktor;NodeKind kind;.)
=
Factor<out term>
{
Mulop<out kind>
Factor<out faktor>                              (. term=new Node(kind,term,faktor,faktor.type==term.type?faktor.type:SymbolTable.noType); .)
}
.
//##################################################################################





//##################################################################################
Factor <out Node faktor>                        (.faktor=null;String name;.)
=
(
IF(isCall()) ProcCall<out faktor>
|Designator<out faktor>
| intCon                                        (. faktor=new Node(symbolTable.intVal(this.t.val)); .)
| floatCon                                      (. faktor=new Node(symbolTable.floatVal(this.t.val)); .)
| charCon                                       (. faktor=new Node(symbolTable.charVal(this.t.val)); .)
| stringCon                                     (. faktor=new Node(this.t.val); .)
| "read" "(" Designator<out Node designator>")" (. faktor=new Node(NodeKind.READ,designator,null,designator.type);.)
| "-" Factor<out Node faktor1>                  (. faktor=new Node(NodeKind.MINUS,new Node(0),faktor1,faktor1.type);.)
| IF (isCast())
"(" Type<out Type type> ")" Factor<out Node factor>
(.
faktor=new Node(
factor.type==symbolTable.intType&&type==symbolTable.charType?NodeKind.I2C:
factor.type==symbolTable.intType&&type==symbolTable.floatType?NodeKind.I2F:
factor.type==symbolTable.floatType&&type==symbolTable.intType?NodeKind.F2I:
factor.type==symbolTable.floatType&&type==symbolTable.intType?NodeKind.C2I:
NodeKind.GENERIC_CAST,
factor,null,type);
.)
| "(" Expr<out faktor> ")"
).
//##################################################################################





//##################################################################################
Designator<out Node designator>
=
Ident<out String name>                          (. designator=new Node(symbolTable.find(name));.)

{"." Ident<out String name2>                    (. Obj typeVar=symbolTable.findField(name2,designator.type); designator=new Node(NodeKind.DOT,designator,new Node(typeVar),typeVar.type );.)
| "[" Expr<out Node expr>                       (. designator=new Node(NodeKind.INDEX,designator,expr,designator.type ); .) "]"}.
//##################################################################################




//##################################################################################
Addop<out NodeKind kind>                        (.kind=null;.)
=
"+"                                             (.kind=NodeKind.PLUS;.)
| "-"                                           (.kind=NodeKind.MINUS; .).
//##################################################################################





//##################################################################################
Mulop<out NodeKind kind>                        (.kind=null;.)
=
"*"                                             (.kind=NodeKind.TIMES;.)
| "/"                                           (.kind=NodeKind.DIV;.)
| "%"                                           (.kind=NodeKind.REM;.).
//##################################################################################






//##################################################################################
//Boolean Operations
//##################################################################################

//##################################################################################
Condition<out Node cond>
=
CondTerm<out cond>
{"||" CondTerm<out Node cond2>                  (.cond=new Node(NodeKind.OR,cond,cond2,Type.BOOL); .)
}.
//##################################################################################

//##################################################################################
CondTerm<out Node cond>
=
CondFact<out cond>
{"&&" CondFact<out Node cond2>                  (.cond=new Node(NodeKind.AND,cond,cond2,Type.BOOL); .)
}.
//##################################################################################

//##################################################################################
CondFact<out Node cond>                         (.cond=null;.)
=
( IF (isExpr()) Expr<out Node expr1>
  Relop<out NodeKind which>
  Expr<out Node expr2>                          (.cond=new Node(which,expr1,expr2,Type.BOOL); .)
| "!" "(" Condition<out Node cond1> ")"         (. cond=new Node(NodeKind.NOT,cond1,null,Type.BOOL);.)
| "(" Condition<out Node cond1> ")"             (.cond=cond1;.)
).
//##################################################################################

//##################################################################################
Relop<out NodeKind which>                       (.which=null;.)
=
(
"=="                                            (.which=NodeKind.EQL;.)
| "!="                                          (.which=NodeKind.NEQ;.)
| ">"                                           (.which=NodeKind.GTR;.)
| ">="                                          (.which=NodeKind.GEQ;.)
| "<"                                           (.which=NodeKind.LSS;.)
| "<="                                          (.which=NodeKind.LEQ;.)
)
.
//##################################################################################


END CMM.
