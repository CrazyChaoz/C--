package at.htlwels.cmm.compiler;

// Set the name of your grammar here (and at the end of this grammar):

COMPILER Cmm

// Add auxiliary methods and declaration here.


// If you want your generated compiler case insensitive add the
// keyword IGNORECASE here.


CHARACTERS
  letter    = 'A'..'Z' + 'a'..'z'.
  digit     = '0'..'9'.
  character    = ANY - '\r' - '\n' - '\t' - '\'' - '\\'.

TOKENS
  ident     = letter { letter | digit | '_' }.
  intCon    = digit{digit}.
  floatCon  = digit {digit} '.' {digit} ['E' ['+'|'-'] digit {digit}].
  charCon   = '\'' ( character | '\\' ('r' | 'n' | 't' | '\'' | '\\' )) '\''.

  //--- token definitions for lookahead peeking
  lpar      = "(".
  rpar      = ")".
  semicolon = ";".
  assign    = '='.
  eql       = "==".
  neq       = "!=".
  lss       = "<".
  leq       = "<=".
  gtr       = ">".
  geq       = ">=".
  bang      = "!".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n'

IGNORE "\t\r\n"


PRODUCTIONS

Cmm={
Constant
|Procedure
}.

Procedure   = Type ident "("{Parameters}")"
"{"
Assignment
|Expression
"}".


Parameters  = Type ident{","Type ident}.

Constant    = "const" Type ident.

Type        = ident{"["intCon"]"}.

Assignment  = Variable "=" Expression ";".
Variable    = ident {"." ident | "[" Expression "]"}.
Expression  = Term {('+'|'-')Term}.
Term        = Factor {('*'|'/') Factor}.
Factor      = ['='] (ident|intCon).

END Cmm.