/*-------------------------------------------------------------------------
CMM Compiler description for C--
=== ============================
-------------------------------------------------------------------------*/

COMPILER CMM

    public  SymbolTable     symbolTable;                     // symbol table


//--- LL(1) conflict resolvers

	// Returns true if a VarDecl comes next in the input
	boolean isVarDecl() {
		if (la.kind == _ident) {
			Token x = scanner.Peek();
			while (x.kind != _semicolon) {
				if (x.kind == _EOF || x.kind == _lpar || x.kind == _assign) return false;
				x = scanner.Peek();
			}
			return true;
		}
		return false;
	}

	// Returns true if the next input is an Expr and not a '(' Condition ')'
	boolean isExpr() {
		if (la.kind == _bang) return false;
		else if (la.kind == _lpar) {
			Token x = scanner.Peek();
			while (x.kind != _rpar && x.kind != _EOF) {
				if (x.kind == _eql || x.kind == _neq || x.kind == _lss || x.kind == _leq || x.kind == _gtr || x.kind == _geq) return false;
				x = scanner.Peek();
			}
			return x.kind == _rpar;
		} else return true;
	}

	// Returns true if the next input is a type cast
	boolean isCast() {
    		Token x = scanner.Peek();
    		if (x.kind != _ident) return false;
    		Obj obj = symbolTable.find(x.val);
    		return obj.kind == ObjKind.TYPE;
    	}


    boolean isCall(){
        scanner.ResetPeek();
        Token x = la;
        if(x.kind != _ident)
            return false;
        x=scanner.Peek();
        if(x.kind != _lpar)
            return false;

        return true;
    }

    void printNext5Values(){
        scanner.ResetPeek();
        System.out.println("-------");
        System.out.println("Value: "+this.la.val);
        for(int i = 0; i < 4; i++) {
            System.out.println("Value: "+scanner.Peek().val);
        }
    }

/*-------------------------------------------------------------------------*/

CHARACTERS
  letter    = 'A'..'Z' + 'a'..'z'.
  digit     = '0'..'9'.
  charCh    = ANY - '\r' - '\n' - '\t' - '\'' - '\\'.

TOKENS
  ident     = letter { letter | digit }.
  intCon    = digit { digit }.
  floatCon  = digit {digit} '.' {digit} ['E' ['+'|'-'] digit {digit}].
  charCon   = '\'' ( charCh | '\\' ('r' | 'n' | 't' | '\'' | '\\' )) '\''.
  whitespace = '\t' | '\r' | '\n'.



  //--- token definitions for lookahead peeking
  lpar      = "(".
  rpar      = ")".
  semicolon = ";".
  assign    = '='.
  eql       = "==".
  neq       = "!=".
  lss       = "<".
  leq       = "<=".
  gtr       = ">".
  geq       = ">=".
  bang      = "!".
  mul       = "*".
  div       = "/".
  add       = "+".
  substr    = "-".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n'

IGNORE "\t\r\n"

//-------------------------------------------------------------------------

PRODUCTIONS

CMM
=	                                            (. symbolTable = new SymbolTable(this);.)
{ ConstDecl
//| IF(isVarDecl()) VarDecl
| StructDecl
| ProcDecl<out Obj procedure>                   (. symbolTable.insert(procedure);.)
}                                               (. symbolTable.dumpTable();.)
.



Ident<out String name>
=
ident (.name=this.t.val;.).


//-------------------------------------------------------------------------

StructDecl
=
"struct" Ident<out String name> "{"             (.Type type=new Type(Type.STRUCT);Obj obj=new Obj(ObjKind.TYPE,name,type);symbolTable.insert(obj);symbolTable.openScope(type.fields);.)
{ VarDecl}
                                                (.symbolTable.closeScope();.)
 "}".
//-------------------------------------------------------------------------



ConstDecl
=
"const" Type<out Type type> Ident<out String name> "=" (intCon | floatCon | charCon)(.symbolTable.insert(ObjKind.CON,name,type);.) ";".
//-------------------------------------------------------------------------
VarDecl
=
Type<out Type type>
Ident<out String name> (.symbolTable.insert(ObjKind.VAR,name,type);.)
{"," Ident<out String name1> (.symbolTable.insert(ObjKind.VAR,name1,type);.)}
";".
//-------------------------------------------------------------------------
Type<out Type type>
=
Ident<out String name> (.type=symbolTable.find(name).type; .)
{"[" intCon (.type=new Type(Type.ARR,symbolTable.intVal(this.t.val),type);.)"]" }
.

ProcDecl<out Obj procedure>             (.NodeList nodeList=new NodeList();.)
=
Type<out Type type>
Ident<out String name>                  (.procedure=new Obj(ObjKind.PROC,name,type);symbolTable.openScope(procedure.localScope); int startLine=scanner.line;.)
"("
[
    Parameter<out Obj param1>           (. symbolTable.insert(param1);.)
    {
        ',' Parameter<out Obj paramN>   (. symbolTable.insert(paramN);.)
    }
]
")""{"
{
IF(isVarDecl())VarDecl
|Statement<out Node statement>          (.nodeList.add(statement);.)
}
(.procedure.ast=new Node(NodeKind.STATSEQ,nodeList.get(),new Node(NodeKind.TRAP,null,null,scanner.line),startLine);symbolTable.closeScope();.)
"}"
.


Parameter<out Obj obj>
=
Type<out Type type> Ident<out String name>      (.obj=new Obj(ObjKind.VAR,name,type);.).
//-------------------------------------------------------------------------
Statement<out Node statement>                   (. statement=null;Node expression=null; NodeList innerStatements=new NodeList();.)
=
(
IF(isCall())ProcCall<out statement>
|Designator<out Node designator> "=" Expr<out expression>              (. statement=new Node(NodeKind.ASSIGN,designator,expression,scanner.line);/*Node.dump(expression,0);*/.)";"
| ReturnStatement<out Node retstat>             (.statement=retstat;.)
| ";"

| "print" "(" Expr<out expression> ")" ";" (. statement=new Node(NodeKind.PRINT,expression,null,scanner.line);.)
| "while""("Condition<out Node condition>")" Statement<out Node innerStatement>(.statement=new Node(NodeKind.WHILE,condition,innerStatement,scanner.line);.)
| "if""("Condition<out Node condition>")"
  Statement<out Node innerStatement>(.statement=new Node(NodeKind.IF,condition,innerStatement,scanner.line);.)
  {"else" Statement<out Node innerStatement>(.statement=new Node(NodeKind.IFELSE,condition,innerStatement,scanner.line);.)}
| "{"
{Statement<out Node innerStatement>             (. innerStatements.add(innerStatement); .)
}                                               (. statement=innerStatements.get(); .)
"}"

).


ProcCall<out Node statement>             (.NodeList nodeList=new NodeList();.)
=
Ident<out String name> "("
{Designator<out Node designator>(. nodeList.add(designator); .)}
")"(. statement=new Node(NodeKind.CALL,new Node(symbolTable.find(name)),nodeList.get(),scanner.line);.)
.

ReturnStatement<out Node statement>             (.statement=null; Node expression=null;.)
=
"return" [Expr<out expression>]                 (. statement=new Node(NodeKind.RETURN,expression,null,scanner.line);.)";".

//-------------------------------------------------------------------------
Expr<out Node expr>                             (.Node term;NodeKind kind;.)
=
Term<out expr>
{
Addop<out kind>
Term<out term>                                  (. expr=new Node(kind,expr,term,term.type==expr.type?term.type:SymbolTable.noType);.)
}
.
//-------------------------------------------------------------------------
Term<out Node term>                             (.Node faktor;NodeKind kind;.)
=
Factor<out term>
{
Mulop<out kind>
Factor<out faktor>                              (. term=new Node(kind,term,faktor,faktor.type==term.type?faktor.type:SymbolTable.noType); .)
}
.
//-------------------------------------------------------------------------
Factor <out Node faktor>        (.faktor=null;String name;.)
=
(
IF(isCall()) ProcCall<out faktor>
|Designator<out faktor>
| intCon                        (. faktor=new Node(symbolTable.intVal(this.t.val)); .)
| floatCon                      (. faktor=new Node(symbolTable.floatVal(this.t.val)); .)
| charCon                       (. faktor=new Node(symbolTable.charVal(this.t.val)); .)
| "read" "(" Designator<out Node designator>")"                (. faktor=new Node(NodeKind.READ,designator,null,designator.type);.)
| "-" Factor<out Node faktor1>  (. faktor=new Node(NodeKind.MINUS,new Node(0),faktor1,faktor1.type);.)
| "(" Expr<out faktor> ")"
).
//-------------------------------------------------------------------------
Designator<out Node designator>
=
Ident<out String name>          (. designator=new Node(symbolTable.find(name));.)

{"." Ident<out String name2>    (. designator=new Node(NodeKind.DOT,new Node(symbolTable.findField(name2,designator.type)),designator,designator.type );.)
| "[" Expr<out Node expr>       (. designator=new Node(NodeKind.INDEX,designator,expr,designator.type ); .) "]"}.
//-------------------------------------------------------------------------
Addop<out NodeKind kind>        (.kind=null;.)
=
"+"                             (. kind=NodeKind.PLUS;.)
| "-"                           (.kind=NodeKind.MINUS; .).
//-------------------------------------------------------------------------
Mulop<out NodeKind kind>        (.kind=null;.)
=
"*"                             (.kind=NodeKind.TIMES;.)
| "/"                           (.kind=NodeKind.DIV;.)
| "%"                           (.kind=NodeKind.REM;.).





//-------------------------------------------------------------------------
//Boolean Operation
//-------------------------------------------------------------------------
Condition<out Node cond>
=
CondTerm<out cond>
{"||" CondTerm<out Node cond2> (.cond=new Node(NodeKind.OR,cond,cond2,Type.BOOL); .)}.
//-------------------------------------------------------------------------
CondTerm<out Node cond>
=
CondFact<out cond>
{"&&" CondFact<out Node cond2> (.cond=new Node(NodeKind.AND,cond,cond2,Type.BOOL); .)}.
//-------------------------------------------------------------------------
CondFact<out Node cond>         (.cond=null;.)
=
( IF (isExpr()) Expr<out Node expr1>
  Relop<out NodeKind which>
  Expr<out Node expr2>                      (.cond=new Node(which,expr1,expr2,Type.BOOL); .)
| "!" "(" Condition<out Node cond1> ")"   (. cond=new Node(NodeKind.NOT,cond1,null,Type.BOOL);.)
| "(" Condition<out Node cond1> ")"       (.cond=cond1;.)
).
//-------------------------------------------------------------------------
Relop<out NodeKind which>                   (.which=null;.)
=
("==" | "!=" | ">" | ">=" | "<" | "<=") (.which=NodeKind.get(t.kind);.).
//-------------------------------------------------------------------------


END CMM.




//-------------------------------------------------------------------------
